@model animeAlley.Models.Personagem

@{
    ViewData["Title"] = "Excluir " + Model.Nome;
}

<div class="show-delete">
    <div class="container d-flex justify-content-md-between justify-content-center align-items-center flex-wrap gap-2">
        <p>Tem certeza que quer excluir esse personagem?</p>
        <form asp-action="Delete">
            <input type="hidden" asp-for="Id" />
            <input type="submit" value="Excluir Personagem" class="btn btn-danger" /> |
            <a asp-action="Index">Voltar à Lista</a>
        </form>
    </div>
</div>

<div class="bg-secondary">
    <div class="container py-lg-5 py-3 personagem-header">
        <div class="d-flex justify-content-between">
            <h1 class="m-0">@Html.DisplayFor(Model => Model.Nome)</h1>
            @if (User.IsInRole("Admin"))
            {
                <div>
                    <a asp-action="Edit" asp-route-id="@Model.Id"><svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="#C4AEAE"><path d="M200-200h57l391-391-57-57-391 391v57Zm-80 80v-170l528-527q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L290-120H120Zm640-584-56-56 56 56Zm-141 85-28-29 57 57-29-28Z" /></svg></a>
                    <a asp-action="Delete" asp-route-id="@Model.Id"><svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="#C4AEAE"><path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z" /></svg></a>
                </div>
            }
        </div>
    </div>
</div>

<div class="container position-relative pt-4 pb-5 personagem-info ">
    <div class="foto-wrap">
        <div class="cover">
            <img src="~/images/personagensFoto/@Html.DisplayFor(Model => Model.Foto)" alt="@Html.DisplayFor(Model => Model.Nome) | Foto" />
        </div>
    </div>

    <div class="info">
        @if (Model.Idade.HasValue)
        {
            <p><b>Idade:</b> @Html.DisplayFor(Model => Model.Idade)</p>
        }

        @if (Model.PersonagemSexualidade.HasValue)
        {
            <p><b>Gênero:</b> @Html.DisplayFor(Model => Model.PersonagemSexualidade)</p>
        }

        @if (Model.DataNasc.HasValue)
        {
            <p><b>Data de Nascimento:</b> @Model.DataNasc.Value.ToString("dd/MM/yyyy")</p>
        }

        <div id="personagemSinopseWrapper" class="personagem-sinopse-collapsed">
            <p id="sinopseText">@Html.DisplayFor(Model => Model.Sinopse)</p>
        </div>
        <button id="toggleSinopse" class="toggle-btn">Ler mais</button>
    </div>

    <div class="container min-vh-100 grid-personagem">
        <h1 class="mb-4">Shows em que participa:</h1>
        <div class="show-grid-container">
            @foreach (var item in Model.Shows)
            {
                <div class="show-grid-item">
                    <a asp-controller="Shows" asp-action="Details" asp-route-id="@item.Id">
                        <img src="~/images/showCover/@item.Imagem" alt="@item.Nome" title="@item.Nome" height="100px" />
                        <span class="score">@item.Nota</span>
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const personagemSinopseWrapper = document.getElementById('personagemSinopseWrapper');
            const toggleSinopseBtn = document.getElementById('toggleSinopse');
            const infoDiv = document.querySelector('.info');

            // --- Logic to replace "BR" with <br> tags ---
            const sinopseTextElement = document.getElementById('sinopseText');
            if (sinopseTextElement) {
                let originalText = sinopseTextElement.innerHTML;
                const regex = /\bBR\b/gi;
                let newText = originalText.replace(regex, '<br>');
                sinopseTextElement.innerHTML = newText;
            }

            // --- Logic for expanding/collapsing sinopse ---
            if (personagemSinopseWrapper && toggleSinopseBtn && infoDiv) {
                // Medir a altura real do conteúdo da sinopse
                const tempDiv = personagemSinopseWrapper.cloneNode(true);
                tempDiv.style.position = 'absolute';
                tempDiv.style.visibility = 'hidden';
                tempDiv.style.height = 'auto';
                tempDiv.style.maxHeight = 'none';
                tempDiv.classList.remove('personagem-sinopse-collapsed');
                document.body.appendChild(tempDiv);

                const fullHeight = tempDiv.scrollHeight;
                const collapsedMaxHeight = 120; // Mesmo valor do CSS

                document.body.removeChild(tempDiv);

                // Verificar se o conteúdo precisa do botão de expandir
                if (fullHeight <= collapsedMaxHeight) {
                    toggleSinopseBtn.style.display = 'none';
                    personagemSinopseWrapper.classList.remove('personagem-sinopse-collapsed');
                } else {
                    toggleSinopseBtn.style.display = 'block';
                    personagemSinopseWrapper.classList.add('personagem-sinopse-collapsed');
                }

                // Event listener para o toggle
                toggleSinopseBtn.addEventListener('click', function() {
                    if (personagemSinopseWrapper.classList.contains('personagem-sinopse-collapsed')) {
                        // Expandir
                        personagemSinopseWrapper.classList.remove('personagem-sinopse-collapsed');
                        personagemSinopseWrapper.classList.add('personagem-sinopse-expanded');
                        infoDiv.classList.add('expanded');
                        toggleSinopseBtn.textContent = 'Ler menos';
                    } else {
                        // Colapsar
                        personagemSinopseWrapper.classList.remove('personagem-sinopse-expanded');
                        personagemSinopseWrapper.classList.add('personagem-sinopse-collapsed');
                        infoDiv.classList.remove('expanded');
                        toggleSinopseBtn.textContent = 'Ler mais';

                        // Scroll suave de volta para o topo da seção de informações
                        infoDiv.scrollIntoView({
                            behavior: 'smooth',
                            block: 'nearest'
                        });
                    }
                });
            }
        });
    </script>
}